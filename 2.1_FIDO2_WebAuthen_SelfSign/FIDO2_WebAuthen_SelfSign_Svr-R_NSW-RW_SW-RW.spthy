theory FIDO2_WebAuthen_SelfSign_Svr_R_NSW_RW_SW_RW

begin

functions:  
            nsToken/1[private],   // access token for ROM/RAM/Flash of Non-Secure world on TEE-based platform   (e.g. Client)
            sToken/1[private],    // access token for ROM/RAM/Flash of Secure world on TEE-based platform       (e.g. Authenticator)
            svrToken/1[private]  // access token for ROM/RAM/Flash of server in WebAuthn protocol              (e.g. Server)

builtins: hashing, signing

/* ******************** Web Authentication Protocol involving entities ******************** */
// User:          A user uses authenticator to authenticate himself/herself during the protocol.
// Authenticator: A cryptographic entity, existing in the TEE world of the local device, can register a 
//                user under a given Server and later assert possession of the registered public key credential, 
//                and optionally verify the user, when requested by the TEE world.
// Client:        Client-side of the protocol, existing in non-TEE world of the local device, processes and forwards the messages
//                exchanging between the Authenticator and the Server.
// Server:        Server-side of the protocol, existing in the remote server, registers and authenticates users during the protocol.


/* ******************** Registration step ( R1~R6 ) ******************** */
/* ******************** Registration step ( R1~R6 ) ******************** */
/* ******************** Registration step ( R1~R6 ) ******************** */
/* ******************** Registration step ( R1~R6 ) ******************** */
/* ******************** Registration step ( R1~R6 ) ******************** */


/* (R1) User sends a registration request (with a $UserName) to Server via Client
*/
rule User_SendRegistrationRequest_to_Server_via_Client:
      [ ] 
    --[ ]->
      [ 
        RAM( nsToken($ClientID), $UserName ), 
        Out(< $SvrID, $ClientID, <$UserName, 'Registration'> >)
      ]


/* (R2) Server (Relying Party) receives the registration request from User via Client,
   generates a challenge ~chalR, and sends ~chalR to Client 
*/
rule Server_PublicKeyCredentialCreationOptions_to_Client:
      [ 
        In(< $SvrID, $ClientID, <$UserName, 'Registration'> >),
        Fr( ~chalR ) 
      ] 
    --[ ]->
      [ 
        RAM( svrToken($SvrID), <$UserName, ~chalR> ), 
        Out(< $SvrID, $ClientID, <$SvrID, $UserName, ~chalR, 'Registration'> >) 
      ]


/*  (R3) Client sends registration and credential generated request to Authenticator in the TEE world
*/
rule Client_AuthenticatorMakeCredential_Request_to_Authen:
      let
        clientData = <chalR, $ClientID>
        clientDataHash = h(clientData)
      in
      [
        In(< $SvrID, $ClientID, <$SvrID, $UserName, chalR, 'Registration'> >) 
      ]
    --[
        SanityCheck1('Arrived')
      ]->
      [ 
        RAM( nsToken($ClientID), chalR ),
        RAM( nsToken($ClientID), <$UserName> ),
        Out(< $ClientID, $AAGUID, <clientDataHash, $SvrID, $UserName, 'Registration'> >) 
      ]


/*  (R4.1) The TEE world shows the registration info to User. With User's verification, 
    the Authenticator generates a pair of authentication keys, and then returns 
    the related authenticator data, and signature signed by the attestation private key.

    In this script, the attestation mode is self-signed attestation, which uses the generated 
    authentication private key as the attestation signing key.

    NOTE: a random number ~nonce is used instead of monotonic increasing counter in Authenticator,
    the ~nonce could be constant at zero if Authenticator doesn't support a counter.
*/
rule Authen_User_Allow_AuthenticatorMakeCredential_Response_to_Client:
      let
          authData = <$SvrID, ~nonce, $AAGUID, pk(~credSk)>
          attestSig = sign(<authData, clientDataHash>, ~credSk)
          attestObj = <authData, attestSig>
      in
      [ 
        // Authenticator receives parameters from Client to generate self-signed attestation signature for registration.
        In(< $ClientID, $AAGUID, <clientDataHash, $SvrID, $UserName, 'Registration'> >) ,
        // Authenticator generates authentication credential key pair
        Fr( ~credSk ),
        // The nonce could be constant at zero if the authenticator doesn't support a global or per credential counter
        Fr( ~nonce )
      ]
    --[
        Alive( $AAGUID ),
        UserRegVerification( $SvrID, $AAGUID, $UserName, ~credSk, 'Allow' ),
        SanityCheck2_1('Arrived')
      ]->
      [ 
        // Authenticator stores authentication credential source in the secure flash
        !Flash( sToken($AAGUID), <$SvrID, $UserName, ~credSk> ),
        // Authenticator sends the response to the Client
        Out(< $ClientID, $AAGUID, attestObj >)
      ]


/*  (R4.2) The TEE world shows the registration info to User. With User's rejection, 
    and the Authenticator returns an error 'NowAllowedError' to Client.
*/
rule Authen_User_Reject_AuthenticatorMakeCredential:
      [ 
        In(< $ClientID, $AAGUID, <clientDataHash, $SvrID, $UserName, 'Registration'> >) 
      ]
    --[
        Alive( $AAGUID ),
        UserRegRejection( $SvrID, $AAGUID, $UserName, 'Reject' ),
        SanityCheck2_2('Arrived')
      ]->
      [ 
        // Authenticator User rejects the registration,
        // and Authenticator sends an error to Client.
        Out(< $ClientID, $AAGUID, 'NotAllowedError' >)     
      ]


/*  (R5) Client receives the generated credential resource from Authenticator,
    and forwards the resource together with clientData to Server
*/
rule Client_AuthenticatorAttestationResponse_to_Server:
      let
        clientData = <chalR, $ClientID>
      in
      [ 
        In(< $ClientID, $AAGUID, attestObj >),
        RAM( nsToken($ClientID), chalR )
      ]
    --[
        SanityCheck3('Arrived')
      ]->
      [ 
        RAM( nsToken($ClientID), attestObj ),
        Out(< $SvrID, $ClientID, <clientData, attestObj> >)
      ]


/*  (R6) Server checks the chanllenge and verifies the attestation signature for generated credential resource.
    If the operations succeed, Server registers User under UserName, and the generated credential resource.
*/
rule Server_ValidateAttestationAndRegister:
      let
        authData = <$SvrID, nonce, $AAGUID, pk(credSk)>
        clientData = <chalR, $ClientID>
        clientDataHash = h(clientData)
      in
      [ 
        // Server retrieves the challenge "chalR" from its RAM
        RAM( svrToken($SvrID), <$UserName, chalR> ), 
        // Server receives the registration  and attestation message from Client
        In(< $SvrID, $ClientID, <<chalR, $ClientID>, <$SvrID, nonce, $AAGUID, pk(credSk)>, attestSig> >)
      ]
    --[
        SanityCheck4('Arrived'),
        ServerRegisterAuthen( $SvrID, $AAGUID, $UserName, pk(credSk) ),
        Eq( verify(attestSig, <authData, clientDataHash>, pk(credSk)), true )  
      ]->
      [ 
        // Server registers and stores authenticator's ID and public key in its flash
        !Flash( svrToken($SvrID), <$AAGUID, $UserName, pk(credSk)> )
      ]


////////////////////////////////////////////////////////////////////////////
// Server is corrupted, and the attacker can read AND/OR modify
// the Server-related RAM, flash and channels.
////////////////////////////////////////////////////////////////////////////

rule SvrAttacker_Read_SvrFlash:
    [ !Flash(svrToken($SvrID), x) ]   --[ Reveal($SvrID, x) ]->    [ Out(x) ]

rule SvrAttacker_Read_SvrRAM:
    [ RAM(svrToken($SvrID), x) ]  --[ Reveal($SvrID, x) ]->    [ Out(x) ]

rule SvrAttacker_Read_TLS:    
    [ TLS( $SvrID, $ClientID, x )   ]  --[ Reveal(<$SvrID,$ClientID>, x) ]->    [ Out(x) ] 

// rule SvrAttacker_Write_SvrFlash:
//     [ !Flash(svrToken($SvrID), x),  In(y) ]  --[ Modification($SvrID, x, y) ]->    [ !Flash(svrToken($SvrID), y) ]

// rule SvrAttacker_Write_SvrRAM:
//     [ RAM(svrToken($SvrID), x),  In(y) ]   --[ Modification($SvrID, x, y) ]->    [ !Flash(svrToken($SvrID), y) ]

// rule SvrAttacker_Write_TLS:    
//     [ TLS( $SvrID, $ClientID, x ),  In( y )   ]  --[ Modification(<$SvrID,$ClientID>, x, y) ]->    [ TLS( $SvrID, $ClientID, y ) ] 


////////////////////////////////////////////////////////////////////////////
// Secure world is corrupted, and the attacker can read AND/OR modify
// the Secure-world-related RAM, flash and channels.
////////////////////////////////////////////////////////////////////////////

rule SwAttacker_Read_SwFlash:
    [ !Flash(sToken($AAGUID), x) ]   --[ Reveal($AAGUID, x) ]->    [ Out(x) ]

rule SwAttacker_Read_SwRAM:
    [ RAM(sToken($AAGUID), x) ]  --[ Reveal($AAGUID, x) ]->    [ Out(x) ]

// rule SwAttacker_Read_LOC:    
//     [ LOC( $ClientID, $AAGUID, x )   ]  --[ Reveal(<$ClientID,$AAGUID>, x) ]->    [ Out(x) ] 

rule SwAttacker_Write_SwFlash:
    [ !Flash(sToken($AAGUID), x),  In(y) ]  --[ Modification($AAGUID, x, y) ]->    [ !Flash(sToken($AAGUID), y) ]

rule SwAttacker_Write_SwRAM:
    [ RAM(sToken($AAGUID), x),  In(y) ]   --[ Modification($AAGUID, x, y) ]->    [ !Flash(sToken($AAGUID), y) ]

// rule SwAttacker_Write_LOC:    
//     [ LOC( $ClientID, $AAGUID, x ),  In( y )   ]  --[ Modification(<$ClientID,$AAGUID>, x, y) ]->    [ LOC( $ClientID, $AAGUID, y ) ] 


////////////////////////////////////////////////////////////////////////////
// Non-secure world is corrupted, and the attacker can read AND/OR modify
// the NS-World-related RAM, flash and channels.
////////////////////////////////////////////////////////////////////////////

rule NswAttacker_Read_NswFlash:
    [ !Flash(nsToken($ClientID), x)  ]   --[ Reveal($ClientID, x) ]->    [ Out(x) ]

rule NswAttacker_Read_NswRAM:
    [ RAM(nsToken($ClientID), x)   ]  --[ Reveal($ClientID, x) ]->    [ Out(x) ]    

// rule NswAttacker_Read_LOC:    
//     [ LOC( $ClientID, $AAGUID, x )   ]  --[ Reveal(<$ClientID,$AAGUID>, x) ]->    [ Out(x) ] 

// rule NswAttacker_Read_TLS:    
//     [ TLS( $SvrID, $ClientID, x )   ]  --[ Reveal(<$SvrID,$ClientID>, x) ]->    [ Out(x) ] 

rule NswAttacker_Write_NswFlash:
    [ !Flash(nsToken($ClientID), x),  In( y ) ]  --[ Modification($ClientID, x, y) ]->    [ !Flash(nsToken($ClientID), y) ]

rule NswAttacker_Write_NswRAM:
    [ RAM(nsToken($ClientID), x),  In( y ) ]   --[ Modification($ClientID, x, y) ]->    [ !Flash(nsToken($ClientID), y) ]

// rule NswAttacker_Write_LOC:    
//     [ LOC( $ClientID, $AAGUID, x ),  In( y )   ]  --[ Modification(<$ClientID,$AAGUID>, x, y) ]->    [ LOC( $ClientID, $AAGUID, y ) ] 

// rule NswAttacker_Write_TLS:    
//     [ TLS( $SvrID, $ClientID, x ),  In( y )   ]  --[ Modification(<$SvrID,$ClientID>, x, y) ]->    [ TLS( $SvrID, $ClientID, y ) ] 


/* ******************** End of the protocol rules ******************** */
/* ******************** End of the protocol rules ******************** */
/* ******************** End of the protocol rules ******************** */
/* ******************** End of the protocol rules ******************** */
/* ******************** End of the protocol rules ******************** */


restriction Equality:
  "
    All x y #i. Eq(x,y) @i ==> x = y
  "


/* ******************** SANITY CHECK ******************** */
/* ******************** SANITY CHECK ******************** */
/* ******************** SANITY CHECK ******************** */
/* ******************** SANITY CHECK ******************** */
/* ******************** SANITY CHECK ******************** */


// lemma SanityCheck1 [use_induction]:
// exists-trace "Ex #i. SanityCheck1('Arrived') @ #i"

// lemma SanityCheck2_1 [use_induction]:
// exists-trace "Ex #i. SanityCheck2_1('Arrived') @ #i"

// lemma SanityCheck2_2 [use_induction]:
// exists-trace "Ex #i. SanityCheck2_2('Arrived') @ #i"

// lemma SanityCheck3 [use_induction]:
// exists-trace "Ex #i. SanityCheck3('Arrived') @ #i"

// lemma SanityCheck4 [use_induction]:
// exists-trace "Ex #i. SanityCheck4('Arrived') @ #i"


/* **************************************** SECRECY **************************************** */
/* **************************************** SECRECY **************************************** */
/* **************************************** SECRECY **************************************** */
/* **************************************** SECRECY **************************************** */
/* **************************************** SECRECY **************************************** */


lemma authentication_private_key_secrecy:
    "(All #i1 #i2 svrID aaguID userName credSk.
    (
      // Once User has allowed Authenticator to generate authentication key credSk,
      UserRegVerification( svrID, aaguID, userName, credSk, 'Allow' ) @ i1
      &
      // and credSk is verified and registered by the Server during attestation,
      ServerRegisterAuthen( svrID, aaguID, userName, pk(credSk) ) @ i2
    )
    // then the attacker can't get the credential private key credSk
    ==> not (Ex #i3. K( credSk ) @ i3 )
  )"


/* **************************************** Authentication **************************************** */
/* **************************************** Authentication **************************************** */
/* **************************************** Authentication **************************************** */
/* **************************************** Authentication **************************************** */
/* **************************************** Authentication **************************************** */


lemma aliveness:
"
  ( All #i svrID aaguID userName credSk.
      ServerRegisterAuthen( svrID, aaguID, userName, pk(credSk) ) @ i
    ==> 
      ( Ex #j. Alive( aaguID ) @ j )
  )
"


lemma weak_agreement:
"
  ( All #i svrID aaguID userName credSk1.
      ServerRegisterAuthen( svrID, aaguID, userName, pk(credSk1) ) @ i
    ==> 
      ( 
        Ex credSk2 #j. 
        UserRegVerification( svrID, aaguID, userName, credSk2, 'Allow' ) @ j
       )
  )
"


lemma ni_agreement:
"
  ( All #i svrID aaguID userName credSk.
      ServerRegisterAuthen( svrID, aaguID, userName, pk(credSk) ) @ i
    ==> 
      ( 
        Ex #j. 
        UserRegVerification( svrID, aaguID, userName, credSk, 'Allow' ) @ j
      )
  )
"


lemma i_agreement:
"
  ( All #i svrID aaguID userName credSk.
      ServerRegisterAuthen( svrID, aaguID, userName, pk(credSk) ) @ i
    ==> 
      ( 
        Ex #j. 
        UserRegVerification( svrID, aaguID, userName, credSk, 'Allow' ) @ j
        & #j < #i
        & not ( Ex svrID2 aaguID2 userName2 #i2. 
                   ServerRegisterAuthen( svrID2, aaguID2, userName2, pk(credSk) ) @ i2
                &  not (#i2 = #i)
              )
      )
  )
"


end